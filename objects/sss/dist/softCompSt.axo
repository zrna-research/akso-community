<objdefs appVersion="1.0.12">
   <obj.normal id="softCompSt" uuid="5a1c1491-cce7-4922-96f2-63477d474ef3">
      <sDescription>Dynamic range compressor with soft-treshold function.
It does direction compression, that means, no attack/release or envelope functioning inside!</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>comp.axh</helpPatch>
      <inlets>
         <frac32buffer name="inL"/>
         <frac32buffer name="inR"/>
      </inlets>
      <outlets>
         <frac32buffer name="outL"/>
         <frac32buffer name="outR"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="pre"/>
         <frac32.u.map name="tresh"/>
         <frac32.u.map name="soft"/>
         <frac32.u.map name="ratio"/>
         <frac32.u.map name="out"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t frac_log(int32_t a) {
	Float_t f;
	f.f = a;
	//a=a>0?a:-1;
	int32_t r1 = ((f.parts.exponent&0x7F)-18) << 24;
	int32_t r3 = logt[f.parts.mantissa>>15]<<10;
	return r1 + r3;
}

int32_t frac_exp(int32_t a) {
	int8_t s = (a>>24)+4;
	uint8_t ei = a>>16;
	if (s>=0)
	     return expt[ei]<<s;
	else return expt[ei]>>(-s);
}]]></code.declaration>
      <code.krate><![CDATA[if(param_tresh<(param_soft>>1)){
ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_tresh],param_soft>>1,0xFFFD);}

int32_t soft=___SMMUL(param_tresh<<3,param_soft<<1)+(8<<21);
int32_t treshlog = frac_log(param_tresh-soft);
int32_t Tresh=frac_log(param_tresh);
Tresh=Tresh-treshlog;
float32_t ratio=(float32_t)(1<<27)/Tresh;
int32_t makeup=frac_log(param_out)-(treshlog);
makeup=frac_exp(makeup);]]></code.krate>
      <code.srate><![CDATA[int32_t In=inlet_inL>>4;
In=__SSAT(In+___SMMUL(inlet_inL,param_pre<<4),29)<<3;
int32_t IN=In;
IN=IN>0?IN:-IN;
int32_t inlog = frac_log(IN);
int32_t over1 = inlog-treshlog;
int32_t over2 = __USAT((over1>>1)*ratio,27);
int32_t gain;
if (over1<0){
	gain = 0x80000;
} else {
	gain = frac_exp(-___SMMUL(over1,___SMMUL(over2<<3,param_ratio<<2))<<5);
}
outlet_outL = ___SMMUL(___SMMUL(In,gain<<10)<<6,makeup<<10);


In=inlet_inR>>4;
In=__SSAT(In+___SMMUL(inlet_inR,param_pre<<4),29)<<3;
IN=In;
IN=IN>0?IN:-IN;
inlog = frac_log(IN);
over1 = inlog-treshlog;
over2 = __USAT((over1>>1)*ratio,27);
gain;
if (over1<0){
	gain = 0x80000;
} else {
	gain = frac_exp(-___SMMUL(over1,___SMMUL(over2<<3,param_ratio<<2))<<5);
}
outlet_outR = ___SMMUL(___SMMUL(In,gain<<10)<<6,makeup<<10);]]></code.srate>
   </obj.normal>
</objdefs>