<objdefs appVersion="1.0.11">
   <obj.normal id="matrix8x16" uuid="f749dd40-8a8b-4f9d-8b28-6b560675f40a">
      <sDescription>8x16 modulation matrix with preset load/save</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32 name="in1" description="input 1"/>
         <frac32 name="in2" description="input 2"/>
         <frac32 name="in3" description="input 3"/>
         <frac32 name="in4" description="input 4"/>
         <frac32 name="in5" description="input 5"/>
         <frac32 name="in6" description="input 6"/>
         <frac32 name="in7" description="input 7"/>
         <frac32 name="in8" description="input 8"/>
         <charptr32 name="filename"/>
      </inlets>
      <outlets>
         <frac32 name="o1"/>
         <frac32 name="o2"/>
         <frac32 name="o3"/>
         <frac32 name="o4"/>
         <frac32 name="o5"/>
         <frac32 name="o6"/>
         <frac32 name="o7"/>
         <frac32 name="o8"/>
         <frac32 name="o9"/>
         <frac32 name="o10"/>
         <frac32 name="o11"/>
         <frac32 name="o12"/>
         <frac32 name="o13"/>
         <frac32 name="o14"/>
         <frac32 name="o15"/>
         <frac32 name="o16"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="gain"/>
         <int32.hradio name="source">
            <MaxValue i="16"/>
         </int32.hradio>
         <int32.hradio name="destiny">
            <MaxValue i="16"/>
         </int32.hradio>
         <bool32.mom name="clear"/>
         <bool32.mom name="load"/>
         <bool32.mom name="save"/>
      </params>
      <attribs/>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[const int LENGTH=256;
int32_t *array;



int prev;
int32_t mod[8];
int i;
int ctrig;
int ltrig;
int strig;]]></code.declaration>
      <code.init><![CDATA[static int32_t _array[attr_poly][128] __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];]]></code.init>
      <code.krate><![CDATA[if ((param_save>0) && !strig) {
    strig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_written;
    err = f_open(&FileObject, inlet_filename, FA_WRITE | FA_CREATE_ALWAYS);
    if (err != FR_OK) {report_fatfs_error(err,"inlet_filename"); return;}
    int rem_sz = sizeof(*array)*LENGTH;
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, sizeof(fbuff));
        err = f_write(&FileObject, fbuff, sizeof(fbuff),&bytes_written);
        rem_sz -= sizeof(fbuff);
        offset += sizeof(fbuff);
      } else {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, rem_sz);
        err = f_write(&FileObject, fbuff, rem_sz, &bytes_written);
        rem_sz = 0;
      }
    }    if (err != FR_OK) report_fatfs_error(err,"inlet_filename");
    err = f_close(&FileObject);
    if (err != FR_OK) report_fatfs_error(err,"inlet_filename");
  }
  else if (!(param_save>0)) strig=0;

  if ((param_load>0) && !ltrig) {
    ltrig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_read;
    err = f_open(&FileObject, inlet_filename, FA_READ | FA_OPEN_EXISTING);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;}
    int rem_sz = sizeof(*array)*LENGTH;
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
        if (bytes_read == 0) break;
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz -= bytes_read;
        offset += bytes_read;
      } else {
        err = f_read(&FileObject, fbuff, rem_sz,&bytes_read);
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz = 0;
      }
    }    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
    err = f_close(&FileObject);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
  }
  else if (!(param_load>0)) ltrig=0;



mod[0]=inlet_in1;
mod[1]=inlet_in2;
mod[2]=inlet_in3;
mod[3]=inlet_in4;
mod[4]=inlet_in5;
mod[5]=inlet_in6;
mod[6]=inlet_in7;
mod[7]=inlet_in8;

if((param_clear>0)&&!ctrig){ctrig=1;for(i=0;i<128;i++){array[i]=0;}}else if(param_clear==0){ctrig=0;}

//load setting
if(!(prev==(param_source+param_destiny+param_clear+param_load))){
ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_gain],array[param_source+param_destiny*8],0xFFFD);}
prev=param_source+param_destiny+param_clear+param_load;

//save setting
array[param_source+param_destiny*8]=param_gain;


outlet_o1=0;
for(i=0;i<8;i++){
outlet_o1+=___SMMUL(array[i]<<3,mod[i]<<2);}

outlet_o2=0;
for(i=0;i<8;i++){
outlet_o2+=___SMMUL(array[i+8]<<3,mod[i]<<2);}

outlet_o3=0;
for(i=0;i<8;i++){
outlet_o3+=___SMMUL(array[i+16]<<3,mod[i]<<2);}

outlet_o4=0;
for(i=0;i<8;i++){
outlet_o4+=___SMMUL(array[i+24]<<3,mod[i]<<2);}

outlet_o5=0;
for(i=0;i<8;i++){
outlet_o5+=___SMMUL(array[i+32]<<3,mod[i]<<2);}

outlet_o6=0;
for(i=0;i<8;i++){
outlet_o6+=___SMMUL(array[i+40]<<3,mod[i]<<2);}

outlet_o7=0;
for(i=0;i<8;i++){
outlet_o7+=___SMMUL(array[i+48]<<3,mod[i]<<2);}

outlet_o8=0;
for(i=0;i<8;i++){
outlet_o8+=___SMMUL(array[i+56]<<3,mod[i]<<2);}

outlet_o9=0;
for(i=0;i<8;i++){
outlet_o9+=___SMMUL(array[i+64]<<3,mod[i]<<2);}

outlet_o10=0;
for(i=0;i<8;i++){
outlet_o10+=___SMMUL(array[i+72]<<3,mod[i]<<2);}

outlet_o11=0;
for(i=0;i<8;i++){
outlet_o11+=___SMMUL(array[i+80]<<3,mod[i]<<2);}

outlet_o12=0;
for(i=0;i<8;i++){
outlet_o12+=___SMMUL(array[i+88]<<3,mod[i]<<2);}

outlet_o13=0;
for(i=0;i<8;i++){
outlet_o13+=___SMMUL(array[i+96]<<3,mod[i]<<2);}

outlet_o14=0;
for(i=0;i<8;i++){
outlet_o14+=___SMMUL(array[i+104]<<3,mod[i]<<2);}

outlet_o15=0;
for(i=0;i<8;i++){
outlet_o15+=___SMMUL(array[i+112]<<3,mod[i]<<2);}

outlet_o16=0;
for(i=0;i<8;i++){
outlet_o16+=___SMMUL(array[i+120]<<3,mod[i]<<2);}]]></code.krate>
   </obj.normal>
</objdefs>