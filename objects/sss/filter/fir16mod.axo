<objdefs appVersion="1.0.12">
   <obj.normal id="fir16mod" uuid="90f8b292-cbb2-4084-9a94-057d6c5d402e">
      <sDescription>finite impulse response filter, with up to 8 presets of 16 randomisable coefficients and offset-modulation.
(help-file into a single module)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>fir16.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="input"/>
         <bool32 name="rnd"/>
         <int32 name="preset"/>
         <bool32 name="sync"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="output"/>
      </outlets>
      <displays/>
      <params>
         <bool32.mom name="rnd"/>
         <frac32.u.map name="size"/>
         <frac32.s.map name="rate"/>
         <frac32.s.map name="mod"/>
         <int32 name="preset">
            <MinValue i="0"/>
            <MaxValue i="7"/>
         </int32>
         <frac32.s.map name="softsync"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
         <spinner name="presets" MinValue="1" MaxValue="8" DefaultValue="0"/>
      </attribs>
      <code.declaration><![CDATA[arm_fir_instance_q31 f;
q31_t state[BUFSIZE + BUFSIZE -1];
static const uint32_t LENGTHPOW = attr_size;
static const uint32_t LENGTH = 1<<attr_size;
static const uint32_t LENGTHMASK = (1<<attr_size)-1;
int32_t Array[LENGTH*attr_presets];
int i;
int j;
int32_t buffer[BUFSIZE];
bool rnd;
int32_t phase;
int32_t sine;
bool snc;
int32_t SNC;]]></code.declaration>
      <code.init><![CDATA[arm_fir_init_q31(&f,
	BUFSIZE,
	0,
	&state[0],
	BUFSIZE);
for(i=0;i<LENGTH*attr_presets;i++){
	Array[i]=(int32_t)(GenerateRandomNumber())>>2;
}]]></code.init>
      <code.krate><![CDATA[if(param_preset>=attr_presets){
	ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_preset],attr_presets-1,0xFFFD);
}

uint32_t soft;
MTOF(param_softsync,soft)
int32_t freq;
MTOFEXTENDED(param_rate,freq)
freq=freq>>14;
int32_t preset=param_preset+inlet_preset;
preset=preset-preset/attr_presets*attr_presets;
preset+=preset<0?attr_presets:0;
preset=preset<<LENGTHPOW;
for(i=0;i<BUFSIZE;i++){
SNC-=___SMMUL(SNC,soft)>>7;
if((inlet_sync>0)&&!snc){
	snc=1;
	SNC+=phase;
	phase=0;
}
else if(inlet_sync<=0){snc=0;}
	phase+=freq;
int32_t sine;
SINE2TINTERP(phase+SNC,sine)
sine=___SMMUL(sine>>2,param_mod<<2);
sine=___SMMUL(param_size<<3,i<<25)+sine;
//sine=__USAT(sine,27);
sine=sine&((1<<27)-1);
   uint32_t asat = sine;
    int index = asat>>(27-LENGTHPOW);
   int32_t y1 = Array[index+preset];
   int32_t y2 = Array[((index+1)&LENGTHMASK)+preset];
   int frac = (asat - (index<<(27-LENGTHPOW)))<<(LENGTHPOW+3);
  int32_t rr;
  rr = ___SMMUL(y1,(1<<30)-frac);
  rr = ___SMMLA(y2,frac,rr);
	buffer[i]=rr<<2;
}






f.pCoeffs = (q31_t*)buffer;

arm_fir_fast_q31(
  &f,
  (q31_t*)inlet_in,
  outlet_out,
  BUFSIZE);

bool RND=(inlet_rnd+param_rnd)&1;
  if((RND>0)&&!rnd){
  	rnd=1;
  	for(i=0;i<(LENGTH*attr_presets);i++){
  		Array[i]=(int32_t)(GenerateRandomNumber())>>3;
  	}
  }
  else if(RND==0){rnd=0;}]]></code.krate>
   </obj.normal>
</objdefs>