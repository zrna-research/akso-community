<objdefs appVersion="1.0.12">
   <obj.normal id="play" uuid="9cf9b0b5-8da9-428a-979a-067e0727e9aa">
      <sDescription>streaming playback of a mono .wav file from sdcard (testing)</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <inlets>
         <frac32 name="pos" description="position"/>
         <bool32.rising name="start" description="trigger"/>
         <bool32.rising name="stop" description="trigger"/>
         <charptr32 name="filename" description="file name"/>
         <bool32 name="loop"/>
         <frac32 name="size"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="output"/>
         <bool32.pulse name="end" description="end of stream"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <includes>
         <include>chibios/ext/fatfs/src/ff.h</include>
         <include>./streamer.h</include>
      </includes>
      <code.declaration><![CDATA[WORKING_AREA(waThreadSD, 800);
   sdReadFilePingpong *stream;
   int starttrig;
   int stoptrig;
   int cnt;
   bool loop;
   bool end;
   int32_t size;]]></code.declaration>
      <code.init><![CDATA[static sdReadFilePingpong s[attr_poly] SDMMC_MEM_FW;
// unmap from aliased memory for DMA
stream = &s[parent->polyIndex];
stream->pingpong = CLOSED;
stream->doSeek = 0;
stream->offset = -1;
starttrig = 0;
stoptrig = 0;
cnt=-1;
stream->pThreadSD = chThdCreateStatic(waThreadSD, sizeof(waThreadSD),
                    HIGHPRIO, ThreadSD, (void *)stream);]]></code.init>
      <code.dispose><![CDATA[sdStopStreamer(stream);]]></code.dispose>
      <code.krate><![CDATA[int32_t i;
outlet_end = 0;
bool start=inlet_start&&!(cnt==0);
if(inlet_loop&&(cnt==0)){cnt=size;}
size=inlet_size>>18;
     if ((start>0) && !starttrig) {
        if(inlet_loop){cnt=size;}
        sdOpenStream(stream,inlet_filename);
        sdSeekStream(stream,((inlet_pos)>>10)<<2);
        starttrig=1;
     } else if ((!(start>0)) && starttrig) {        starttrig=0;
     }
     if ((inlet_stop>0) && !stoptrig) {
        sdCloseStream(stream);
        stoptrig=1;
     } else if ((!(inlet_stop>0)) && stoptrig) {        stoptrig=0;
     }
     int16_t *p = 0;
     int16_t *q = 0;
     p=sdReadStream(stream);
     SCB_InvalidateICache();
     SCB_CleanInvalidateDCache();
     if (p) {
        for(i=0;i<BUFSIZE;i++){
           outlet_out[i] = (*(p++))<<10;
        }
     }
     else {

        for(i=0;i<BUFSIZE;i++)
        	outlet_out[i] = 0;
        outlet_end = 1;

     }
//     loop=inlet_loop>0?outlet_end&&!end:0;
//    end=outlet_end;
cnt-=cnt>=0?1:0;]]></code.krate>
   </obj.normal>
</objdefs>