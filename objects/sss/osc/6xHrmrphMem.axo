<objdefs appVersion="1.0.10">
   <obj.normal id="6xHrmrphMem" uuid="1df29129-f091-4087-9b02-65e239154e5d">
      <sDescription>This is the control module for the 6xHrmrphOSC module.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>hook.axh</helpPatch>
      <inlets>
         <frac32 name="FMW"/>
         <frac32 name="Walk" description="adds to respective value, so no need for external adders."/>
         <frac32 name="SprdM" description="adds to respective value"/>
         <frac32 name="Sprd1" description="adds to respective value"/>
         <frac32 name="Sprd2" description="adds to respective value"/>
         <frac32 name="SprdE" description="adds to respective value"/>
         <frac32 name="AM" description="adds to respective value"/>
         <int32 name="Step1" description="adds to respective value"/>
         <int32 name="Step2" description="adds to respective value"/>
         <int32 name="Range" description="adds to respective value"/>
         <int32 name="Minimum" description="adds to respective value"/>
         <frac32 name="Algo"/>
         <frac32 name="ShiftStep"/>
         <frac32 name="ShiftHalf"/>
         <frac32 name="ShiftSec"/>
         <frac32 name="ShiftThr"/>
         <int32 name="sel" description="select parameter to change (0 to 17)"/>
         <frac32.positive name="in" description="input for controlling parameters"/>
         <bool32.rising name="trg" description="Trigger high updates parameter to &quot;in&quot; inlet"/>
      </inlets>
      <outlets>
         <frac32 name="FMW"/>
         <frac32 name="Walk"/>
         <frac32 name="SprdM"/>
         <frac32 name="Sprd1"/>
         <frac32 name="Sprd2"/>
         <frac32 name="SprdE"/>
         <frac32 name="AM"/>
         <int32 name="Step1" description="Connect all parameters to corresponding inputs of the quad counter module or several single counter modules."/>
         <int32 name="Step2"/>
         <int32 name="Range"/>
         <int32 name="Minimum"/>
         <frac32 name="Algo"/>
         <frac32 name="ShiftStep"/>
         <frac32 name="ShiftHalf"/>
         <frac32 name="ShiftSec"/>
         <frac32 name="ShiftThr"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="FMW"/>
         <frac32.s.map name="Walk"/>
         <frac32.s.map name="SprdM"/>
         <frac32.s.map name="Sprd1"/>
         <frac32.s.map name="Sprd2"/>
         <frac32.s.map name="SprdE"/>
         <frac32.s.map name="AM"/>
         <int32 name="Step1">
            <MinValue i="1"/>
            <MaxValue i="512"/>
         </int32>
         <int32 name="Step2">
            <MinValue i="0"/>
            <MaxValue i="512"/>
         </int32>
         <int32 name="Range">
            <MinValue i="1"/>
            <MaxValue i="512"/>
         </int32>
         <int32 name="Minimum">
            <MinValue i="1"/>
            <MaxValue i="512"/>
         </int32>
         <frac32.s.map name="Algo"/>
         <frac32.s.map name="ShiftStep"/>
         <frac32.s.map name="ShiftHalf"/>
         <frac32.s.map name="ShiftSec"/>
         <frac32.s.map name="ShiftThr"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[
int32_t cache;
int trg;]]></code.declaration>
      <code.krate><![CDATA[   switch(inlet_sel>0?inlet_sel:0){

	case 0:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_FMW],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 1:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_Walk],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 2:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_SprdM],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 3:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_Sprd1],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 4:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_Sprd2],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 5:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_SprdE],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 6:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_AM],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 7:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_Step1],(inlet_in>>19)+257,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 8:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_Step2],(inlet_in>>19)+256,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 9:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_Range],(inlet_in>>19)+257,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 10:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_Minimum],(inlet_in>>19)+257,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 11:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_Algo],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 12:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_ShiftStep],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 13:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_ShiftHalf],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 14:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_ShiftSec],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

	case 15:
		if((inlet_trg>0)&&(trg!=1))
		{trg=1;
			ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_ShiftThr],inlet_in,0xFFFD);
		}
		else
		{
			if(inlet_trg==0)
			{
			trg=0;
			}
		}
	break;

}
outlet_FMW=param_FMW+inlet_FMW;
outlet_Walk=param_Walk+inlet_Walk;
outlet_SprdM=param_SprdM+inlet_SprdM;
outlet_Sprd1=param_Sprd1+inlet_Sprd1;
outlet_Sprd2=param_Sprd2+inlet_Sprd2;
outlet_SprdE=param_SprdE+inlet_SprdE;
outlet_AM=param_AM+inlet_AM;
outlet_Step1=param_Step1+inlet_Step1;
outlet_Step2=param_Step2+inlet_Step2;
outlet_Range=param_Range+inlet_Range;
outlet_Minimum=param_Minimum+inlet_Minimum;
outlet_Algo=param_Algo+inlet_Algo;
outlet_ShiftStep=param_ShiftStep+inlet_ShiftStep;
outlet_ShiftHalf=param_ShiftHalf+inlet_ShiftHalf;
outlet_ShiftSec=param_ShiftSec+inlet_ShiftSec;
outlet_ShiftThr=param_ShiftThr+inlet_ShiftThr;]]></code.krate>
   </obj.normal>
</objdefs>