<objdefs appVersion="1.0.10">
   <obj.normal id="shufflingGateSequencer" uuid="ff0003d5-e942-4d0f-a805-20fd84ed0865">
      <sDescription>&quot;constant from 16 flags&quot;.....hmmmm... that one evolved quickly...

FIRST ADD A TABLE ALLOCATION MODULE AND &quot;TABLE SAVE&quot; MODULE FROM THE FACTORY TABLE FOLDER!!!!!!!!!! and make a structure to save the table into a .tab file! BEFORE EDITTING!!!
(otherwise you&apos;ll lose everything as you can&apos;t save it as it&apos;s needed to stop the patcher to add the modules and restart the patcher... NOOOOOOOOooooooooo!..... *sight*)

4 channel 64-step(max) gate sequencer with 1024 presets per-bank. (positions and values are saved together as a single decimal number, so 1024 numbers equals 1024 sequences per bank!)
Each step has 4 positions (white=chance0, light gray=chance1, dark gray=chance2 and black). A black step always generates a high gate, the others can be given a random-chance value of that step generating a gate. (chance of colors set by the chance0, chance1 and chance2 controls)

There&apos;s no internal storage memory, so the module loads banks from- and saves to table allocation module (size at least 4* 1024*(number of banks)  ).
Because of this, there are no presets available when you use this module for the first time.

 -Then first edit the bars of the sequencer to have a rhythm.
 -check whether you&apos;re saving to the right bar (&quot;bar&quot; selector)
 -check whether you&apos;ve saving to the right preset (&quot;seqwrite&quot; selector, for first timers, start with preset/slot 0).
 -set the preset load position (&quot;seqread&quot; selector) to the same number (for first timers, this will be preset/slot 0)
 -press &quot;save&quot;
 -your sequence has now been saved to the internal memory at the preset/slot and in the bar that you&apos;ve selected.

 -now select another BAR.
 -now EITHER:
             -press &quot;save&quot;, which will save the same sequence of the former bar to the next bar. Do this 2 times more and you&apos;ve filled your 64 step sequence.
 -OOOORRRRRR
             -in case the internal memory is empty at that spot, press load, and it will reset all the bars to zero. (This will be your &quot;first-time&quot; case, it will reset as there&apos;s no preset to
              load).
             -in case the internal memory is NOT empty in the newly selected bar, but contains another sequence (previously loaded from a table or eddited before), it will load that sequence into
              the sequence editor.

 -after editting all the BARS and saving them TO THE SAME(!!) &quot;seqwrite&quot; number, you can select a new &quot;seqwrite&quot;.
 -to start a fresh sequence (empty editor) and the internal memory is empty in the selected &quot;seqread&quot;, press &quot;load&quot; to quick-reset sequence.
 -if you already have a sequence in that position, and want to load that one, select the same number for &quot;seqread&quot; and press load for all the bars.
 -if you already have a sequence in that position but want to over-write it with another sequence (eg, your former sequence):
        -This can be done quite quickly: select bar1, press &quot;load&quot;, press &quot;save&quot;, select next bar, press &quot;load&quot;, press &quot;save&apos;, etc. for the two other bars (takes you 4 seconds most with a
         mouse..?)
        -then edit the copied bars one by one (select a bar, press load-&gt;loads into editor-&gt;edit sequence-&gt;press save-&gt;REPEAT WITH NEXT BAR)

It&apos;s pretty important to understand how this bar/preset-system and read/write-functions (load/save) work, as you might very well be over-writing or loading the wrong sequence.. destroying precious old or freshly found sequences!

TO FINISH THIS OFF!!!
Hope you read and added a &quot;save table&quot; module by now, as when you press &quot;stop&quot; after editing to add the &quot;save&quot; module, you just lost everything except your last loaded sequence in the editor!!

-if you made some sequence-presets you can save these to the table allocator by first selecting a &quot;bank&quot; and then pressing &quot;Psave&quot;. Each bank will have 1024 positions for sequences.
-now press &quot;save&quot; for the &quot;table save&quot; module, to save the table into a file on your SDRAM card. (oh shit, you didn&apos;t have one... all for nothing.. go get it!! ;) )
-your table is now saved onto your SDRAM card.

-TO RE-LOAD old files, add a &quot;table load&quot; module from the factory table folder and give it the same table-name to load the table to as the &quot;save table&quot; module.
-then press &quot;Pload&quot; on the sequencer module (this module that would be..). The table is now loaded into the sequencer and ready to be used (if you&apos;re triggering the sequencer already, it should be sending out gates already-&gt;it&apos;s the internal memory that&apos;s used to play the sequences.


NOW THE FUN PART STARTS!
All those boolean-inputs at the side??

-First one is of course for triggering the internal counter.
-Counting modifications to bitswap/shift/logic, bit-invert and reverse (from current play position) the counter output with external sequences/controls. (internal counter itself is untouched, so it always goes back to where it should have been if  the modification wouldn&apos;t happen.)

well.. guess that&apos;s the &quot;only couple of things you need to know&quot;..... ghehe

ahh shit, I added more functionality.. ;)

live recorder:
to record to a channel, select the channel with the toggle switches (recG1 to recG4).
You can record to multiple channels at the same time (to record parallel hits)

then hit any of the c0rec/c1rec/c2rec/Grec buttons to add a white,light grey, dark grey or black step to the recording position.

to clear a pattern (white steps only), press the &quot;clear&quot; button.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>ctrl.axh</helpPatch>
      <inlets>
         <bool32.rising name="trig"/>
         <bool32.rising name="reset"/>
         <int32 name="sequence"/>
         <bool32 name="reverse"/>
         <bool32 name="ones"/>
         <bool32 name="twos"/>
         <bool32 name="fours"/>
         <bool32 name="eights"/>
         <bool32 name="sixteens"/>
         <bool32 name="thirtytwos"/>
         <bool32 name="xor"/>
         <int32 name="xorValue"/>
         <bool32 name="andShift"/>
         <int32 name="andValue"/>
         <int32 name="shiftValue"/>
         <bool32.risingfalling name="Pload"/>
      </inlets>
      <outlets>
         <bool32 name="g1" description="output gate for sequence 1"/>
         <bool32 name="g2" description="output gate for sequence 2"/>
         <bool32 name="g3" description="output gate for sequence 3"/>
         <bool32 name="g4" description="output gate for sequence 4"/>
         <int32.positive name="pos16" description="outputs count in 16 steps max, then wraps back to zero."/>
         <int32 name="count" description="outputs count in steps till maximum set by the &quot;step&quot; parameter."/>
         <int32 name="normcount" description="outputs unmodified count"/>
         <int32 name="maxcount"/>
      </outlets>
      <displays/>
      <params>
         <int2x16 name="b1" description=""/>
         <int2x16 name="b2"/>
         <int2x16 name="b3"/>
         <int2x16 name="b4"/>
         <frac32.s.map name="chance0" description="sets chance on gate-high when step is white(&quot;0&quot;)"/>
         <frac32.s.map name="chance1" description="sets chance on gate-high when step is light grey(&quot;1&quot;)"/>
         <frac32.s.map name="chance2" description="sets chance on gate-high when step is drak grey(&quot;2&quot;)"/>
         <bool32.tgl name="gate" description="sets whether gate outputs are triggers(white) or sustained (black)"/>
         <int32 name="steps" description="sets max amount of stepsof within the 64 step bar (countlength, spread over 4 bars)">
            <MinValue i="1"/>
            <MaxValue i="64"/>
         </int32>
         <bool32.mom name="load" description="loads pattern &quot;seqread&quot; (internal memory) into the sequence-editor (useful for copying from this preset to another &quot;seqwrite&quot; preset)"/>
         <bool32.mom name="save" description="saves pattern from the sequence-editor into the &quot;seqwrite&quot; pattern (internal memory)"/>
         <int32.hradio name="bar" description="select bar to edit/load/save (depending on what you click next)">
            <MaxValue i="4"/>
         </int32.hradio>
         <int32 name="seqRead" description="select the saved pattern you want to READ from when editting">
            <MinValue i="0"/>
            <MaxValue i="64"/>
         </int32>
         <int32 name="seqWrite" description="select the saved pattern you want to SAVE to when editting">
            <MinValue i="0"/>
            <MaxValue i="64"/>
         </int32>
         <bool32.mom name="Psave" description="saves internal pattern memory to the selected &quot;bank&quot; in the table allocation module (DON&quot;T FORGET TO ADD THE ALLOCATION MODULE!)"/>
         <bool32.mom name="Pload" description="loads selected &quot;bank&quot; from table allocation module into the internal memory of the module."/>
         <int32 name="bank">
            <MinValue i="0"/>
            <MaxValue i="64"/>
         </int32>
         <bool32.mom name="Grec"/>
         <bool32.mom name="c0rec"/>
         <bool32.mom name="c1rec"/>
         <bool32.mom name="c2rec"/>
         <bool32.tgl name="recG1"/>
         <bool32.tgl name="recG2"/>
         <bool32.tgl name="recG3"/>
         <bool32.tgl name="recG4"/>
         <bool32.mom name="clear"/>
      </params>
      <attribs>
         <objref name="table"/>
      </attribs>
      <code.declaration><![CDATA[int32_t array[1024];
int record[64];
int32_t positionread;
int32_t positionwrite;
int32_t mem01;
int32_t sequence;
int ttrig;
int Rtrig;
int ltrig;
int strig;
int rndtrig;
int bar;
int update;
int count;
int caunt;
int save;
int load;
int i;
int32_t rnd1;
int32_t rnd2;
int32_t rnd3;
int32_t rnd4;
int32_t rnd5;
int32_t rnd6;
int32_t rnd7;
int32_t rnd8;
int32_t rnd9;
int32_t rnda;
int32_t rndb;
int32_t rndc;
int cont;
int reva;
int reverse;
int bit1;
int bit2;
int bit3;
int bit4;
int bit5;
int bit6;
int32_t sum1;
int32_t sum2;
int32_t sum3;
int32_t sum4;]]></code.declaration>
      <code.init><![CDATA[int j;
for( j=0;j<64;j++) record[j]=0;{}
]]></code.init>
      <code.krate><![CDATA[int32_t steps=param_steps;

//generate counter
if ((inlet_trig>0)&&(!(ttrig)))
{ttrig=1;
cont+=1;
cont=cont>=steps?0:cont;}
else if (!(inlet_trig>0))
{ttrig=0;}

//reset counter
if((inlet_reset>0)&&(!(Rtrig)))
{Rtrig=1;
cont=0;}
else {if(!(inlet_reset>0))Rtrig=0;}

outlet_normcount=cont;

//reverse direction
if(inlet_reverse>0)
{if(reverse==0)
{reva=cont;}
reverse=1;
caunt=(reva+(reva-cont));


//caunt=caunt-(caunt/steps)*steps;
}
else
{caunt=cont;if(inlet_reverse==0){reverse=0;}}

//decimal logics

// XOR
if(inlet_xor>0)
{caunt=caunt^inlet_xorValue;}

//AND
if(inlet_andShift>0)
{caunt=(caunt&inlet_andValue)==caunt?caunt:(caunt+inlet_shiftValue);}

caunt=caunt-(caunt/steps)*steps;
//decimal to bit
if(caunt>31)
{caunt=caunt-32;
bit6=1;}
else
{bit6=0;}

if(caunt>15)
{caunt=caunt-16;
bit5=1;}
else
{bit5=0;}

if(caunt>7)
{caunt=caunt-8;
bit4=1;}
else
{bit4=0;}

if(caunt>3)
{caunt=caunt-4;
bit3=1;}
else
{bit3=0;}

if(caunt>1)
{caunt=caunt-2;
bit2=1;}
else
{bit2=0;}

if(caunt>0)
{bit1=1;}
else
{bit1=0;}




//inverse bits

//shift 1st-bits
if(inlet_ones>0)
{bit1=1-bit1;}

//shift 2nd-bits
if(inlet_twos>0)
{bit2=1-bit2;}

//shift 3rd-bit
if(inlet_fours>0)
{bit3=1-bit3;}

//shift 4th-bit
if(inlet_eights>0)
{bit4=1-bit4;}

//shift 4th-bit
if(inlet_sixteens>0)
{bit5=1-bit5;}

//shift 4th-bit
if(inlet_thirtytwos>0)
{bit6=1-bit6;}

//bit to decimal
count=bit1+2*bit2+4*bit3+8*bit4+16*bit5+32*bit6;

outlet_count=count;

//record to array
if(param_Grec>0)
{record[count]=3;}
if(param_c0rec>0)
{record[count]=0;}
if(param_c1rec>0)
{record[count]=1;}
if(param_c2rec>0)
{record[count]=2;}
if((param_Grec+param_c0rec+param_c1rec+param_c2rec)>0)
{
sum1=0;
sum2=0;
sum3=0;
sum4=0;
for(i=0;i<16;i++){sum1+=(record[i]*3)<<(i*2);}
for(i=0;i<16;i++){sum2+=(record[i+16]*3)<<(i*2);}
for(i=0;i<16;i++){sum3+=(record[i+32]*3)<<(i*2);}
for(i=0;i<16;i++){sum4+=(record[i+48]*3)<<(i*2);}
}
if(param_clear>0)
{for(i=0;i<64;i++){record[i]=0;}}

//array positioning
bar=param_bar;
sequence=param_seqRead;
positionread=bar*4+param_seqRead*16;
positionwrite=bar*4+param_seqWrite*16;
//load
if((param_load>0)&&(!(ltrig)))
{ltrig=1;
ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_b1],array[positionread],((1<<32)-1));
ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_b2],array[positionread+1],((1<<32)-1));
ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_b3],array[positionread+2],((1<<32)-1));
ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_b4],array[positionread+3],((1<<32)-1));}
else if (!(param_load>0))
{ltrig=0;}
//save
if((param_save>0)&&(!(strig)))
{strig=1;
array[positionwrite] = (param_b1);
array[positionwrite+1] = (param_b2);
array[positionwrite+2] = (param_b3);
array[positionwrite+3] = (param_b4);
}
else if (!(param_save>0))
{strig=0;;}


int cranged=count /16;
int Cranged=count-cranged*16;
cranged=cranged*4;
int gate=ttrig+param_gate;
int32_t bank=param_bank;

//save record to memory
if(param_recG1>0)
{
	array[inlet_sequence*16]=sum1;
	array[inlet_sequence*16+4]=sum2;
	array[inlet_sequence*16+8]=sum3;
	array[inlet_sequence*16+12]=sum4;
}

if(param_recG2>0)
{
	array[inlet_sequence*16+1]=sum1;
	array[inlet_sequence*16+5]=sum2;
	array[inlet_sequence*16+9]=sum3;
	array[inlet_sequence*16+13]=sum4;
}

if(param_recG3>0)
{
	array[inlet_sequence*16+2]=sum1;
	array[inlet_sequence*16+6]=sum2;
	array[inlet_sequence*16+10]=sum3;
	array[inlet_sequence*16+14]=sum4;
}

if(param_recG4>0)
{
	array[inlet_sequence*16+3]=sum1;
	array[inlet_sequence*16+7]=sum2;
	array[inlet_sequence*16+11]=sum3;
	array[inlet_sequence*16+15]=sum4;
}


//save to table
if ((param_Psave>0) && (!save)) {
save=1;
for(i=0;i<1024;i++)
{attr_table.array[i+(bank)*1024]=(array[i])>>attr_table.GAIN;}
}
if (!(param_Psave>0)) {save=0;}
//load from table

if (((param_Pload+inlet_Pload)>0) && (!load)) {
load=1;
for(i=0;i<1024;i++)
{(array[i])=attr_table.array[i+(bank)*1024]<<attr_table.GAIN;}
}
if (!((param_Pload+inlet_Pload)>0)) {load=0;}



int g1=(array[inlet_sequence*16+cranged]>>((Cranged)*2))&3;
int g2=(array[inlet_sequence*16+cranged+1]>>((Cranged)*2))&3;
int g3=(array[inlet_sequence*16+cranged+2]>>((Cranged)*2))&3;
int g4=(array[inlet_sequence*16+cranged+3]>>((Cranged)*2))&3;
outlet_pos16=Cranged;

   if ((inlet_trig>0) && (!rndtrig))
   {
   rnd1 = (int32_t)(GenerateRandomNumber())>>4;
   rnd2 = (int32_t)(GenerateRandomNumber())>>4;
   rnd3 = (int32_t)(GenerateRandomNumber())>>4;
   rnd4 = (int32_t)(GenerateRandomNumber())>>4;
   rnd5 = (int32_t)(GenerateRandomNumber())>>4;
   rnd6 = (int32_t)(GenerateRandomNumber())>>4;
   rnd7 = (int32_t)(GenerateRandomNumber())>>4;
   rnd8 = (int32_t)(GenerateRandomNumber())>>4;
   rnd9 = (int32_t)(GenerateRandomNumber())>>4;
   rnda = (int32_t)(GenerateRandomNumber())>>4;
   rndb = (int32_t)(GenerateRandomNumber())>>4;
   rndc = (int32_t)(GenerateRandomNumber())>>4;

   rndtrig=1;}
   else if (!(inlet_trig>0)) rndtrig=0;

outlet_g1=((((g1==0)&(param_chance0>rnd9))?(1<<27):0)+(((g1==1)&(param_chance1>rnd1))?(1<<27):0)+(((g1==2)&(param_chance2>rnd5))?(1<<27):0)+((g1==3)?(1<<27):0))*(((inlet_trig+param_gate)>0)?1:0);
outlet_g2=((((g2==0)&(param_chance0>rnda))?(1<<27):0)+(((g2==1)&(param_chance1>rnd1))?(1<<27):0)+(((g2==2)&(param_chance2>rnd6))?(1<<27):0)+((g2==3)?(1<<27):0))*(((inlet_trig+param_gate)>0)?1:0);
outlet_g3=((((g3==0)&(param_chance0>rndb))?(1<<27):0)+(((g3==1)&(param_chance1>rnd1))?(1<<27):0)+(((g3==2)&(param_chance2>rnd7))?(1<<27):0)+((g3==3)?(1<<27):0))*(((inlet_trig+param_gate)>0)?1:0);
outlet_g4=((((g4==0)&(param_chance0>rndc))?(1<<27):0)+(((g4==1)&(param_chance1>rnd1))?(1<<27):0)+(((g4==2)&(param_chance2>rnd8))?(1<<27):0)+((g4==3)?(1<<27):0))*(((inlet_trig+param_gate)>0)?1:0);
outlet_maxcount=param_steps;]]></code.krate>
   </obj.normal>
</objdefs>