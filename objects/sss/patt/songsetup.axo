<objdefs appVersion="1.0.12">
   <obj.normal id="songsetup" uuid="8b7ea6a4-7f1a-43dd-8c4c-0205fd9908e5">
      <sDescription>(USE WITH THE MODULE: patt/songtracker)
a songtracker to create songs
a song is divided into parts where each part is divided in bars, bars in measures and measures in steps.
Each part has it&apos;s own settings for:
-nominator (steps in measure)
-denominator (rate within the measure based on main tempo)
-amount of measures within a bar
-amount of bars within the part
-whether the part loops back to another part (repeating several parts as a whole)
-which part to loop back to
-how many times this loop has to be performed before going further to the next part after the loop. (don&apos;t loop back within another loop, otherwise it will loop endlessly)

the remaining controls set the last part of the song and whether the song will repeat after the last part has been played

These two modules should be able to setup whole songs (hopefully)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>table.axh</helpPatch>
      <inlets>
         <bool32 name="copy2next" description="copies the current part to the next part (useful for quick polyrhythmic variations)"/>
         <bool32 name="copyfrom" description="copies the part selected with the &quot;from&quot; input to the current input."/>
         <int32 name="from" description="selects the part to copy from"/>
         <bool32 name="update" description="when triggered, updates the controls to the internal array (eg. when you load a song from SDcard-&gt;connect load button to this input)"/>
      </inlets>
      <outlets/>
      <displays>
         <int32.label name="length" noLabel="true"/>
      </displays>
      <params>
         <int32 name="part" description="selects part in the song to edit">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="preset" description="selects a preset for this part">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="nominator" description="selects the amount of steps per measure for this part">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="denominator" description="selects the rate of the measure for this part (measure can be understood as the &quot;beat&quot;, denominator sets division of this &quot;beat&quot;)">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="measures" description="selects the amount of measures per bar for this part">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="bars" description="selects the amount of bars for this part">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <bool32.tgl name="loopback" description="when high and the loopmax hasn&apos;t been reach yet, sends the song back to the selected part"/>
         <int32 name="loop2part" description="selects the part to which the song has to return when this part has ended">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="loops" description="selects how many times the parts must loop before continuing to the next part">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="lastpart" description="selects the last part of the song">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <bool32.tgl name="loopparts" description="when high, restarts the song at start position. When low, song stops playing after the last part has been played"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>2</string>
               <string>4</string>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
               <string>128</string>
               <string>256</string>
               <string>512</string>
               <string>1024</string>
               <string>2048</string>
               <string>4096</string>
               <string>8192</string>
               <string>16384</string>
               <string>32768</string>
               <string>65536</string>
               <string>131072</string>
               <string>262144</string>
               <string>524288</string>
               <string>1048576</string>
               <string>2097152</string>
               <string>4194304</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
               <string>22</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
static const uint32_t BITS = 8;
static const uint32_t GAIN = 20;
int8_t *array;
int part,i,max;
bool upd,DO,loop,copy,from;
int32_t total,ptotal;]]></code.declaration>
      <code.init><![CDATA[static int8_t _array[LENGTH<<3] __attribute__ ((section (".sdram")));
array = &_array[0];

//  for(i=0;i<LENGTH<<3;i++){ array[i]=0;
//}

part=8;
DO=0;]]></code.init>
      <code.krate><![CDATA[if(inlet_update&&!upd){upd=1;
DO=1;
}
else if(upd&&!inlet_update){upd=0;}



if((!((param_part-1<<3)==part))||DO){
	part=param_part-1<<3;
	for(i=0;i<8;i++){
	ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_preset+i],array[part+i]+(!(i==5)?1:0),0xFFFD);
	}
	if(DO){DO=0;}
}

if(inlet_copy2next&&!copy){
	copy=1;
	for(i=0;i<8;i++){
		array[part+i+8]=array[part+i];
	}
}
else if(copy&&!inlet_copy2next){copy=0;}

if(inlet_copyfrom&&!from){
	from=1;
	for(i=0;i<8;i++){
	array[part+i]=array[i+(inlet_from<<3)];
	}
}
else if(from&&!inlet_copyfrom){from=0;}


loop=param_loopparts;
max=param_lastpart-1;
array[part]=param_preset-1;
array[part+1]=param_nominator-1;
array[part+2]=param_denominator-1;
array[part+3]=param_measures-1;
array[part+4]=param_bars-1;
array[part+5]=param_loopback;
array[part+6]=param_loop2part-1;
array[part+7]=param_loops-1;
total=0;
for(i=0;i<8;i++){
	total+=array[part+i];
}
if((!(ptotal==total))&&(param_part>param_lastpart)){
	ParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_lastpart],param_part,0xFFFD);
}


ptotal=total;]]></code.krate>
   </obj.normal>
</objdefs>